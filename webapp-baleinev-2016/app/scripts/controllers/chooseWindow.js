/*global pmw, $*/pmw.Controllers = pmw.Controllers || {};(function(global) {    'use strict';    // Yik!     var towerImageWidth = 868;    var towerImageHeight = 500;    var currentWindow = {        x: 0,        y: 0    }    var forbiddenWindows = [{x: 3, y: 3}];    var winData = {        left: {            winWidth: 2,            width: 7.5,            left: 35,            top: 13,            distanceX: 7.6,            distanceY: 16.6,            offsetY: 4.6,            image: 'images/selected-window-left.png'        },        right: {            winWidth: 2,            width: 7.5,            left: 50.5,            top: 18,            distanceX: 7.8,            distanceY: 16.65,            offsetY: -4.3,            image: 'images/selected-window-right.png'        }    };    var windowModel = {        "ratio" : 1.2234,        "margin" : {            "x" : 0.0652173913000000,            "y" : 0.1418439716000000        }    };    pmw.Controllers.ChooseWindowController = pmw.Controllers.AbstractController.extend({        pageHeadline: "Choisis une fenÃªtre",        _initViews: function() {            backRoute = "/";            // Create the ContentView with the controller (this) as scope            if (!this.contentView) {                this.contentView = pmw.Views.ChooseWindowView.create(this, null, true);            }            // Create the HeaderView with the controller (this) as scope            if (!this.headerView) {                this.headerView = pmw.Views.BackheaderView.create(this, null, true);            }            this._applyViews();            window.addEventListener('resize', this.resize.bind(this), false);            window.addEventListener('orientationchange', this.resize.bind(this), false);            $(".isometric-tower .tower-image img")[0].onload = this.resize.bind(this);            if (global.pmw.options.selectedWindowData === null) {                this.randomWindow();            } else {                this.setSelectedWindow(currentWindow.x, currentWindow.y);            }            var that = this;            this.beginCheckArtistIsLive();        },        beginCheckArtistIsLive: function () {            function checkArtistIsLive() {                $.get(global.pmw.options.serverUrl + "/option?name=artistIsLive", function (option){                    if (option.data.isLive === true) {                        $(".reserved-message .artist-name").html(option.data.artistName);                        $(".reserved-message").addClass("active");                    } else {                        $(".reserved-message").removeClass("active");                    }                });            }            if (typeof this.checkArtistIsLiveInterval === 'undefined') {                this.checkArtistIsLiveInterval = setInterval(checkArtistIsLive.bind(this), 10000);                checkArtistIsLive.call(this);            }                    },        randomWindow: function () {            var x = Math.floor(Math.random() * 4);            var y = Math.floor(Math.random() * 4);            this.setSelectedWindow(x, y);            this.checkForbiddenWindow(1);        },        nextWindow: function () {            this.navigateWindow(1);        },        previousWindow: function () {            this.navigateWindow(-1)        },        navigateWindow: function (n) {            currentWindow.x += n;            if (currentWindow.x >= 4) {                currentWindow.y += n;                currentWindow.x = 0;            }            if (currentWindow.x < 0) {                currentWindow.y += n;                currentWindow.x = 3;            }            if (currentWindow.y >= 4) {                currentWindow.y = 0;                currentWindow.x = 0;            }            if (currentWindow.y < 0) {                currentWindow.y = 3;                currentWindow.x = 3;            }            //this.checkForbiddenWindow(n);            this.setSelectedWindow(currentWindow.x, currentWindow.y);        },        checkForbiddenWindow: function (n) {            for (var i = 0; i < forbiddenWindows.length; i++) {                if (forbiddenWindows[i].x === currentWindow.x && forbiddenWindows[i].y === currentWindow.y) {                    this.navigateWindow(n);                    break;                }            }        },        setSelectedWindow: function (x, y) {            var calcX = 0;            var calcY = 0;            var calcW = 0;            var calcH = 0;            currentWindow.x = x;            currentWindow.y = y;            var img = "";            if (x < winData.left.winWidth) {                calcX = winData.left.left + x * winData.left.distanceX;                calcY = winData.left.top + x * winData.left.offsetY + y * winData.left.distanceY;                calcW = winData.left.width;                calcH = winData.left.height;                var img = winData.left.image;            } else {                calcX = winData.right.left + (x - winData.left.winWidth) * winData.right.distanceX;                calcY = winData.right.top + (x - winData.left.winWidth) * winData.right.offsetY + y * winData.right.distanceY;                calcW = winData.right.width;                calcH = winData.right.height;                var img = winData.right.image;            }            $(".selected-window img").attr("src", img);            $(".selected-window img")[0].onload = function (){                $(".selected-window").css({                    left: calcX + '%',                    top: calcY + '%',                    width: calcW + '%',                    height: calcH + '%'                })            }        },        validateWindow: function () {            global.pmw.options.selectedWindowData = {                width: 1,                height: 1,                x: currentWindow.x,                y: currentWindow.y,                windowModel: windowModel            }            this.gotoPage("drawLive");        },        resize: function () {            var availableW = $(".choose-window").width();            var availableH = $(".choose-window").height();            var isometricTower = $(".isometric-tower");            var newW = 0;            var newH = 0;            if (availableH < towerImageHeight) {                newH = availableH;                newW = availableH * towerImageWidth / towerImageHeight;            } else {                newH = towerImageHeight;                newW = towerImageWidth;            }            isometricTower.css({                width: newW + 'px',                height: newH + 'px',                marginLeft: (-newW/2) + 'px',                marginTop: (-newH/2) + 'px'            })        },        clickTower: function (event, child) {            console.log(child);        },        gotoPage: function(page) {            pmw.navigate({                route: '/' + page            });        }    });})(this);