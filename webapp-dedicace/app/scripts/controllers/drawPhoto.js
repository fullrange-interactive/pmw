pmw.Controllers = pmw.Controllers || {},    function (global) {        "use strict";        function drawImageIOSFix(ctx, img) {            // $(".share-instagram .user-photo-big img").attr("src", photoUrl);            var vertSquashRatio = detectVerticalSquash(img)            var arg_count = arguments.length            switch (arg_count) {                case 4:                    ctx.drawImage(img, arguments[2], arguments[3] / vertSquashRatio);                    break                case 6:                    ctx.drawImage(img, arguments[2], arguments[3], arguments[4], arguments[5] / vertSquashRatio);                    break                case 8:                    ctx.drawImage(img, arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7] / vertSquashRatio);                    break                case 10:                    ctx.drawImage(img, arguments[2], arguments[3], arguments[4], arguments[5], arguments[6], arguments[7], arguments[8], arguments[9] / vertSquashRatio);                    break            }            // Detects vertical squash in loaded image.            // Fixes a bug which squash image vertically while drawing into canvas for some images.            // This is a bug in iOS6 (and IOS7) devices. This function from https://github.com/stomita/ios-imagefile-megapixel            function detectVerticalSquash(img) {                var iw = img.naturalWidth,                    ih = img.naturalHeight                var canvas = document.createElement("canvas")                canvas.width = 1                canvas.height = ih                var ctx = canvas.getContext('2d')                ctx.drawImage(img, 0, 0)                var data = ctx.getImageData(0, 0, 1, ih).data                    // search image edge pixel position in case it is squashed vertically.                var sy = 0,                    ey = ih,                    py = ih                while (py > sy) {                    var alpha = data[(py - 1) * 4 + 3]                    if (alpha === 0) { ey = py } else { sy = py }                    py = (ey + sy) >> 1                }                var ratio = (py / ih)                return (ratio === 0) ? 1 : ratio            }        }        // Detect file input support for choosing a photo or taking a picture        // Known bad players:         //   - Windows Phone 7 and 8.0 (8.1 is okay)        //   - Some very old android 2 versions        var isFileInputSupported = function () {            // Handle devices which falsely report support            if (navigator.userAgent.match(/(Android (1.0|1.1|1.5|1.6|2.0|2.1))|(Windows Phone (OS 7|8.0))|(XBLWP)|(ZuneWP)|(w(eb)?OSBrowser)|(webOS)|(Kindle\/(1.0|2.0|2.5|3.0))/)) {                return false;            }            // Create test element            var el = document.createElement("input");            el.type = "file";            return !el.disabled;        }        // Detect FormData support for uploading files asynchronously        // Known bad players:         //   - Android 2.x        //   - Windows Phone 7 and 8.0 (no shit?)        var isFormDataSupported = function () {            if (typeof (global.FormData) == "undefined") {                return false;            }            return true;        }        // Detect         var isFileReaderSupported = function () {            var info = new MobileDetect(window.navigator.userAgent);            if (info.phone() == "HTC") {                console.log("HTC piece of shit, disabling file reader.")                return false;            }            if (info.phone() == "Samsung") {                console.log("Samsung piece of shit, disabling file reader.");                return false;            }            if (typeof (global.FileReader) == "undefined") {                return false;            }            return true;        }        var getOS = function () {            var info = new MobileDetect(window.navigator.userAgent);            return info.os();        }        // // Detect file input support for choosing a photo or taking a picture        // // Known bad players:         // //   - Windows Phone 7 and 8.0 (8.1 is okay)        // //   - Some very old android 2 versions        // var isFileInputSupported = function () {        //     // Handle devices which falsely report support        //     if (navigator.userAgent.match(/(Android (1.0|1.1|1.5|1.6|2.0|2.1))|(Windows Phone (OS 7|8.0))|(XBLWP)|(ZuneWP)|(w(eb)?OSBrowser)|(webOS)|(Kindle\/(1.0|2.0|2.5|3.0))/)) {        //         return false;        //     }        //     // Create test element        //     var el = document.createElement("input");        //     el.type = "file";        //     return !el.disabled;        // }        // // Detect FormData support for uploading files asynchronously        // // Known bad players:         // //   - Android 2.x        // //   - Windows Phone 7 and 8.0 (no shit?)        // var isFormDataSupported = function () {        //     if (typeof (global.FormData) == "undefined") {        //         return false;        //     }        //     return true;        // }        function a(a, b) {            localStorage.removeItem("StrokesPhoto"), d.push({                points: [{                    x: a,                    y: b                }, {                    x: a + 1,                    y: b + 1                }],                color: g,                lineWidth: h            }), localStorage.setItem("StrokesPhoto", JSON.stringify(d))        }        var canvasDOM;        var canvas2Dctx;        var g = "#000000";        var ctx = null;        var loaderTouchStart = null;        var loaderOffTime = 500;        var loader = null;        var imageDimensions = {};        var photoUploaded = false;        var b, c, d, e, f = null,           // g = "#000000",            h = 10;        pmw.Controllers.DrawPhotoController = pmw.Controllers.AbstractController.extend({            pageHeadline: "Photo",            selectionSize: M.Model.create({                size: 5            }),            strokesMin: 10,            palette: [                ["FFFFFF", "FF0000", "94c13c", "0000FF"],                ["000000", "964B00", "07ace2", "F57900"],                ["e5287b", "75507B", "FCE94F", "888888"],                ["008800"]            ],            background: null,            _initViews: function ()             {                // imageDimensions = {width:global.pmw.options.winWidth,height:global.pmw.options.winHeight};                getOS();                if (global.pmw.photographer) {                    backRoute = "#photographer";                } else {                    backRoute = "#";                                    }                if (!isFormDataSupported() || !isFileInputSupported()) {                    alert("Malheureusement votre téléphone n'est pas assez récent et n'est pas compatible avec notre application.");                    // If file upload is not supported, there's absolutely no way for this app to work :(. Fuck Windows Phone 7, the worst phone OS ever made.                    return;                }                // Create the ContentView with the controller (this) as scope                if (!this.contentView) {                    this.contentView = pmw.Views.DrawPhotoView.create(this, null, true);                }                // Create the HeaderView with the controller (this) as scope                if (!this.headerView) {                    this.headerView = pmw.Views.BackheaderView.create(this, null, true);                }                                this._applyViews();                $('.colorpicker.foreground input').spectrum({                    showPaletteOnly: true,                    showPalette: true,                    color: g,                    palette: this.palette,                    change: function(color) {                        g = color.toHexString();                        localStorage.setItem('Foreground', color.toHexString());                    }                });                $('.selectionSize .selection-list').sizeChooser(this.changeSize);                ctx = $("#scratch-canvas").get()[0].getContext("2d");                                // $(".page-drawphoto .camera").show();                // $(".page-drawphoto .camera").prepend('<input type="file" capture="camera" accept="image/*" id="takePictureField">');                // $(".page-drawphoto #takePictureField").on("change", this.takePicture.bind(this));                // what does this do?                 !("url" in window) && "webkitURL" in window && (window.URL = window.webkitURL)                /* If an image to draw on is already selected */                if(global.pmw.selectedGalImage !== null)                {                    $(".page-drawphoto .camera").hide();                    var img = new Image();                    var that = this;                    var imgURL = global.pmw.options.serverUrl + global.pmw.selectedGalImage;                    var imgPath = global.pmw.selectedGalImage;                    console.log("Loading from gallery: " + global.pmw.selectedGalImage)                                        img.onload = function(controller)                    {                        imageDimensions.width = this.width;                        imageDimensions.height = this.height;                        img = null;                        controller.background = imgPath;                        localStorage.setItem("BackgroundDrawPhoto", imgPath);                        localStorage.setItem("BackgroundWidth", imageDimensions.width);                        localStorage.setItem("BackgroundHeight", imageDimensions.height);                        controller.newCanvas();                        controller.setBackground();                                            }.bind(img, this)                    img.src = imgURL;                    global.pmw.selectedGalImage = null;                                        // localStorage.setItem("BackgroundDrawPhoto",  this.background);                }                else                {                    // Restore from localStorage                                        imageDimensions.width = localStorage.getItem("BackgroundWidth");                    imageDimensions.height = localStorage.getItem("BackgroundHeight");                    this.background = localStorage.getItem("BackgroundDrawPhoto");                    this.newCanvas();                        this.setBackground();                }            },            newCanvas: function () {                var canvasTag = '<canvas id="canvasDrawPhoto" width="' + $(window).width() + '" height="' + ($(window).height() - $(".page-drawphoto .toolbarview").height() - $(".page-drawphoto .tools").height()) + '"></canvas>';                $(".page-drawphoto .contentCanvas").html(canvasTag);                canvasDOM = $(".page-drawphoto .contentCanvas canvas")[0];                canvas2Dctx = $(".page-drawphoto .contentCanvas canvas")[0].getContext("2d");                this.resizeCanvas();                window.addEventListener("resize", this.resizeCanvas.bind(this), false);                window.addEventListener("orientationchange", this.resizeCanvas.bind(this), false);                if(localStorage.getItem("StrokesPhoto") != null)                {                    d = JSON.parse(localStorage.getItem("StrokesPhoto"));                    this.repaint();                }                else                    d = [];                                canvas2Dctx.strokeStyle = localStorage.getItem("ForegroundPhoto") ? localStorage.getItem("ForegroundPhoto") : g;                canvas2Dctx.lineWidth = h;                canvas2Dctx.lineCap = "round";                canvas2Dctx.lineJoin = "round";                $(".page-drawphoto .contentCanvas canvas").drawTouchPhoto();                $(".page-drawphoto .contentCanvas canvas").drawPointerPhoto();                $(".page-drawphoto .contentCanvas canvas").drawMousePhoto();            },            clearDraw: function () {                if(window.location.hash == 'drawPhoto')                {                          $(".drawPhotoCanvas").addClass("drawPhotoCanvasEmpty")                    var a = [];                    for (var b in this.palette)                        for (var c in this.palette[b])                            a.push(this.palette[b][c]);                        localStorage.removeItem("StrokesPhoto");                        localStorage.removeItem("ForegroundPhoto");                        localStorage.removeItem("BackgroundDrawPhoto");                        this.newCanvas();                        this.repaint();                }                else                {                    localStorage.removeItem("StrokesPhoto");                    d = [];                                        this.repaint();                }            },            changeSize: function () {                h = $(".page-drawphoto .selectionSize select").val(), canvas2Dctx.lineWidth = h            },            undo: function () {                d.pop(), this.repaint()            },            saveDraw: function () {                var a = this;                console.log(a.background), $('<div title="Confirmation">Envoyer la photo?</div>').dialog({                    resizable: !1,                    height: 200,                    modal: !0,                    draggable: !1,                    buttons: {                        Non: function () {                            $(this).dialog("close")                        },                        Oui: function () {                            var b = d;                            $.ajax({                                url: global.pmw.options.serverUrl + "/drawing",                                type: "post",                                data: {                                    action: "newDrawing",                                    strokes: b,                                    width: canvasDOM.width,                                    height: canvasDOM.height,                                    groupId: global.pmw.options.drawingWindowGroup,                                    background: localStorage.getItem("BackgroundDrawPhoto")                                }                            }).done(function (b) {                                a.clearDraw();                                localStorage.removeItem("BackgroundDrawPhoto");                                b = jQuery.parseJSON(b);                                M.Toast.show("ok" == b.responseType ? "Votre photo a été envoyée! Nos modérateurs vont y jeter un oeil." : "Erreur lors de l'envoi ! :(");                                if(window.location.hash != 'drawPhoto')                                    pmw.navigate({                                        route: ''                                    });                                                  }), $(this).dialog("close")                        }                    }                })            },            drawLine: function (a, c, d, e, f, g) {                canvas2Dctx.beginPath();                canvas2Dctx.lineCap = "round";                canvas2Dctx.lineJoin = "round";                canvas2Dctx.strokeStyle = a;                canvas2Dctx.lineWidth = c;                canvas2Dctx.moveTo(d, e);                canvas2Dctx.lineTo(f, g);                canvas2Dctx.stroke();                canvas2Dctx.closePath();            },            resizeCanvas: function () {                var screenHeightOffset = $(".page-drawphoto .toolbarview").height() + $(".page-drawphoto .tools").height();                var screenHeight = (window.innerHeight ? window.innerHeight : $(window).height())-screenHeightOffset;                var ratioScreen = $(window).width()/screenHeight;                                var ratioImage =  imageDimensions.width / imageDimensions.height;                console.log( $(".page-drawphoto .contentCanvas canvas").height());                var origImage = canvas2Dctx.getImageData(                    0,                    0,                    canvasDOM.width,                    canvasDOM.height);                /* If screen is more landscape, constraint height */                if(ratioScreen > ratioImage)                {                    canvasDOM.height = screenHeight;                    canvasDOM.width = imageDimensions.width/(imageDimensions.height / screenHeight);                }                else /* Constraint width */                {                    console.log("a")                    canvasDOM.height = imageDimensions.height/(imageDimensions.width / $(window).width());                                        canvasDOM.width = $(window).width();                }                $(".page-drawphoto .contentCanvas").height(canvasDOM.height);                $(".page-drawphoto .contentCanvas").width(canvasDOM.width);                canvas2Dctx.putImageData(origImage, 0, 0);                this.repaint();            },            repaint: function () {                if (d) {                    canvas2Dctx.clearRect(0, 0, canvasDOM.width, canvasDOM.height);                    for (var a = 0; a < d.length; a++)                        for (var c = 0; c < d[a].points.length - 1; c++) this.drawLine(d[a].color, d[a].lineWidth, d[a].points[c].x, d[a].points[c].y, d[a].points[c + 1].x, d[a].points[c + 1].y)                }                canvas2Dctx.lineWidth = h;            },            takePicDone: function (controller, e, noExif){                console.log("Read photo");                //Load the photo as an image                var img = new Image();                img.onload = function (){                    if ( loader != null )                        loader.hide();                                        //The photo was successfully loaded                    if ( !noExif ){                        EXIF.getData(img, function (){                            ctx.setTransform(1, 0, 0, 1, 0, 0);                            var imgWidth = ctx.canvas.width;                            var imgHeight = ctx.canvas.height;                            var orientation = EXIF.getTag(img, "Orientation");                            if(navigator.userAgent.match(/Windows Phone/i)){                                // Fuck you Windows Phone 8 and your fucked up                                // EXIF rotation                                switch (orientation) {                                case 2:                                    // horizontal flip                                    ctx.translate(imgWidth, 0);                                    ctx.scale(-1, 1);                                    break;                                case 3:                                    // 180° rotate left                                    ctx.translate(imgWidth, imgHeight);                                    ctx.rotate(Math.PI);                                    break;                                case 4:                                    // vertical flip                                    ctx.translate(0, imgHeight);                                    ctx.scale(1, -1);                                    break;                                case 5:                                    // vertical flip + 90 rotate right                                    ctx.rotate(-0.5 * Math.PI);                                    ctx.scale(1, -1);                                    break;                                case 6:                                    // 90° rotate right                                    ctx.rotate(-0.5 * Math.PI);                                    ctx.translate(0, -imgHeight);                                    break;                                case 7:                                    // horizontal flip + 90 rotate right                                    ctx.rotate(-0.5 * Math.PI);                                    ctx.translate(imgWidth, -imgHeight);                                    ctx.scale(-1, 1);                                    break;                                case 8:                                    // 90° rotate left                                    ctx.rotate(0.5 * Math.PI);                                    ctx.translate(-imgWidth, 0);                                    break;                                }                            }else{                                switch (orientation) {                                case 2:                                    // horizontal flip                                    ctx.translate(imgWidth, 0);                                    ctx.scale(-1, 1);                                    break;                                case 3:                                    // 180° rotate left                                    ctx.translate(imgWidth, imgHeight);                                    ctx.rotate(Math.PI);                                    break;                                case 4:                                    // vertical flip                                    ctx.translate(0, imgHeight);                                    ctx.scale(1, -1);                                    break;                                case 5:                                    // vertical flip + 90 rotate right                                    ctx.rotate(0.5 * Math.PI);                                    ctx.scale(1, -1);                                    break;                                case 6:                                    // 90° rotate right                                    ctx.rotate(0.5 * Math.PI);                                    ctx.translate(0, -imgHeight);                                    break;                                case 7:                                    // horizontal flip + 90 rotate right                                    ctx.rotate(0.5 * Math.PI);                                    ctx.translate(imgWidth, -imgHeight);                                    ctx.scale(-1, 1);                                    break;                                case 8:                                    // 90° rotate left                                    ctx.rotate(-0.5 * Math.PI);                                    ctx.translate(-imgWidth, 0);                                    break;                                }                            }                        })                    }                                        var w = img.width;                    var h = img.height;                    var r = w / h;                    var ox = 0;                    var oy = 0;                    var ow = 0;                    var oh = 0;                    var wr = ctx.canvas.width / ctx.canvas.height;                    if (r > wr) {                        // More landscape                        console.log("landscape");                        ow = h * wr;                        oh = h;                        ox = (w - ow) / 2;                        console.log(ox);                    } else {                        // More portrait                        oh = w / wr;                        ow = w;                        oy = (h - oh) / 2;                     }                                        var os = getOS();                    if ( os == "iOS" ){                        console.log("ios drawimage")                        drawImageIOSFix(ctx, this, ox, oy, ow, oh, 0, 0, ctx.canvas.width, ctx.canvas.height);                    }else{                        console.log("other drawimage")                        ctx.drawImage(this, ox, oy, ow, oh, 0, 0, ctx.canvas.width, ctx.canvas.height);                    }                    console.log("photoUploaded = " + photoUploaded)                    if ( !photoUploaded ){                        controller.sendPhoto()                    }else{                        this.setBackground();                        return;                    }                                    }                img.src = this.result;                        },            abort: function (){                alert("Opération annulée.");            },                        error: function (e){                if ( loader != null )                    loader.hide();                alert("Il y a eu une erreur, merci d'essayer plus tard. Erreur: " + e)            },            setBackground: function (){                // console.log("what")                $(".drawPhotoCanvas").removeClass("drawPhotoCanvasEmpty");                this.clearDraw();                this.repaint();                $(".page-drawphoto canvas").css("background", "url('" + global.pmw.options.serverUrl + this.background + "')");                $(".page-drawphoto canvas").css("background-size", "cover");                $(".page-drawphoto canvas").css("background-position", "50% 50%");                // localStorage.setItem("BackgroundDrawPhoto", this.background)            },            takePicture: function (element)            {                var photoPicker = element.target;                //console.log("A = " + JSON.stringify(photoPicker.files[0]));                if ( !photoPicker.files || photoPicker.files.length == 0 ){                    alert("Tu dois choisir ou prendre une photo!");                    return;                }                if ( isFileReaderSupported() ){                    //FileReader available, resize                    var reader = new global.FileReader();                    reader.onabort = this.abort;                    reader.onerror = this.error;                    reader.onload = this.takePicDone.bind(reader, this);                    reader.readAsDataURL(photoPicker.files[0]);                    loader = M.LoaderView.create().render();                    this.bindForceClose();                }                else                {                    // FileReader not available                    // TODO : Upload the file without resizing                    var fd = new FormData();                    var that = this;                    loader = M.LoaderView.create().render().show();                    this.bindForceClose();                    fd.append("file", photoPicker.files[0]);                    $.ajax({                        url: global.pmw.options.serverUrl + "/photo",                        type: "post",                        data: fd,                        processData: false,                        contentType: false,                        responseType: "json"                    }).done(function (data){                        data = JSON.parse(data);                        if ( data.error ){                            alert(data.error);                        }                        loader.hide();                        photoUploaded = true;                        that.background = data.url;                        that.setBackground();                        loader.hide(true);                    }).fail(function (data){                        console.log(data);                        if ( loader )                            loader.hide();                        if (data.responseText) {                            alert(data.responseText);                            return;                        }                        alert("Une erreur s'est produite (connexion au serveur impossible), mais ce n'est pas de ta faute! Merci d'essayer plus tard.")                    });                }            },            sendPhoto: function (){                var that = this;                if ( photoUploaded ){                    this.showParticipate();                                }else{                    var base64Data = ctx.canvas.toDataURL('image/jpeg', 1);                    var format = "jpeg";                    if ( base64Data.substring(0,30).indexOf("image/png") != -1 ){                        format = "png";                    }                    loader = M.LoaderView.create().render().show();                    this.bindForceClose();                    $.post(global.pmw.options.serverUrl + "/photo",                        {                            base64Image: base64Data,                            imageFormat: format                        }, function (data){                            if ( loader != null )                                loader.hide();                            if ( data.error ){                                alert(data.error);                                return;                            }                            that.background = data.url;                            that.setBackground();                        }, "json")                    .fail(function (){                        if ( loader != null )                            loader.hide();                        alert("Une erreur s'est produite ... mais ce n'est pas de votre faute! Veuillez ressayer plus tard.")                                        });                    // data:image/png;                }            },            bindForceClose: function(){                $(".loaderview .view").on("tap mousedown", function(e){                    if ( loaderTouchStart == null ){                        loaderTouchStart = (new Date()).getTime();                        return false;                    }                    if ( (new Date()).getTime() - loaderTouchStart > loaderOffTime ){                        loaderTouchStart = null;                        return;                    }                    console.log("remove")                    this.forceCloseLoader();                }.bind(this));            },            forceCloseLoader: function (){                console.log(loader);                if ( loader != null ){                    loader.hide();                }            }        })        $.fn.drawTouchPhoto = function () {            var e = function (d) {                    d = d.originalEvent, canvas2Dctx.beginPath(), canvas2Dctx.strokeStyle = g, c = d.changedTouches[0].pageX, f = d.changedTouches[0].pageY - 100, canvas2Dctx.moveTo(c, f), canvas2Dctx.lineTo(c + 1, f + 1), canvas2Dctx.stroke(), a(c, f)                },                h = function (a) {                    a.preventDefault(), a = a.originalEvent, c = a.changedTouches[0].pageX, f = a.changedTouches[0].pageY - 100, canvas2Dctx.lineTo(c, f), canvas2Dctx.stroke(), d[d.length - 1].points.push({                        x: c,                        y: f                    })                };            $(this).on("touchstart", e), $(this).on("touchmove", h)        }        $.fn.drawPointerPhoto = function () {            var e = function (d) {                    d = d.originalEvent, canvas2Dctx.beginPath(), canvas2Dctx.strokeStyle = g, c = d.pageX, f = d.pageY - 100, canvas2Dctx.moveTo(c, f), canvas2Dctx.lineTo(c + 1, f + 1), canvas2Dctx.stroke(), a(c, f)                },                h = function (a) {                    a.preventDefault(), a = a.originalEvent, c = a.pageX, f = a.pageY - 100, canvas2Dctx.lineTo(c, f), canvas2Dctx.stroke(), d[d.length - 1].points.push({                        x: c,                        y: f                    })                };            $(this).on("MSPointerDown", e), $(this).on("MSPointerMove", h)        }        $.fn.drawMousePhoto = function () {            var e = 0,                h = function (d) {                    e = 1;                    canvas2Dctx.beginPath();                    canvas2Dctx.strokeStyle = g;                    c = d.pageX;                    f = d.pageY - 100;                    canvas2Dctx.moveTo(c, f);                    canvas2Dctx.lineTo(c + 1, f + 1);                    canvas2Dctx.stroke();                    a(c, f);                },                i = function (a) {                    e && (c = a.pageX, f = a.pageY - 100, canvas2Dctx.lineTo(c, f), canvas2Dctx.stroke(), d[d.length - 1].points.push({                        x: c,                        y: f                    }))                },                j = function () {                    e = 0                };            $(this).on("mousedown", h), $(this).on("mousemove", i), $(window).on("mouseup", j)        }    }(this);